// automatically generated by the FlatBuffers compiler, do not modify

package Role

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserRolesResp struct {
	_tab flatbuffers.Table
}

func GetRootAsUserRolesResp(buf []byte, offset flatbuffers.UOffsetT) *UserRolesResp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserRolesResp{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UserRolesResp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserRolesResp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserRolesResp) UserId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserRolesResp) MutateUserId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *UserRolesResp) Roles(obj *Role, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *UserRolesResp) RolesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func UserRolesRespStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UserRolesRespAddUserId(builder *flatbuffers.Builder, userId int32) {
	builder.PrependInt32Slot(0, userId, 0)
}
func UserRolesRespAddRoles(builder *flatbuffers.Builder, roles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roles), 0)
}
func UserRolesRespStartRolesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func UserRolesRespEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
